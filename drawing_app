"""
Experimental Drawing App
by M Bendele
June 2015
"""

import simplegui
import random

W,H            = 1000, 650
CLEAR_COL      = 0x2211EE#'White'
SCRN_POLY      = ([0,0],[W,0],[W,H],[0,H])
ALPHABET       = range(ord('a'), ord('z')) + range(ord('A'), ord('Z'))
TXT_SIZE_RANGE = (50, min(W,H)/5.)
JITTER         = int(W*.08)#int(W*.03)

SUBLIMINAL_MESSAGE = "Python is Awesome!!! Spam, Spam, Spam, Spam, Spammity Spam, Wonderful Spam."

class Queue:
    MAX = 65536
    """
    General purpose, resizable queue class
    
    """
    def __init__(self, size=16):
        """ Initilize an empty queue """
        self._queue = [None]*size
        self._size = size
        self._beg = 0
        self._end = 0
        self._num_items = 0
        
    def __str__(self):
        return str(self._queue)
        
    def __len__(self):
        return self._num_items
            
    def isEmpty(self):
        """ Return True if queue is empty """
        return self._queue[self._beg] == None
    
    def get_size(self):
        """ Return number of items in queue """
        return self._size
    
    def peek(self):
        """ Look at (return) oldest element in queue """
        return self._queue[self._beg]
    
    def resize(self):
        """
        Double the size of the holding array if needed
        
        """
        if self._size >= Queue.MAX:
            assert False, "Draw Queue MAX size error"
            
        new_queue = self._queue[self._beg:] + self._queue[:self._beg] + [None]*self._size
        
        self._size *= 2
        self._beg = 0
        self._end = self._num_items
        self._queue = new_queue
 
    def enqueue(self, item):
        """ 
        Add item to queue. 
        
        """
        # set last space to item
        self._queue[self._end] = item
        
        # increment end counter and item counter
        self._end = (self._end+1)%self._size
        self._num_items += 1
        
        if self._queue[self._end] != None:
            self.resize()

    def dequeue(self):
        """ 
        Return item from queue 
        
        """
        if self.isEmpty():
            return None
        
        item = self._queue[self._beg]
        self._queue[self._beg] = None
        self._beg = (self._beg+1)%self._size
        self._num_items -= 1

        return item   

    
class DrawQueue(Queue):
    """
    Create queue to hold draw events
    *This is a Singleton hack for use with Codeskulptor
    """
    def __init__(self):
        global DrawQueue
        Queue.__init__(self, 32)
        DrawQueue = lambda: self 
        
        # alias for use with dequeue iterator
        self.drain = DrawQueue() 
        
    def __iter__(self):
        return self

    def next(self):
        if self.isEmpty():
            raise StopIteration
        else:
            return self.dequeue()
    
    
class Brush:
    def __init__(self):
        """ Initialize a Brush object """
        pass
    
dq = DrawQueue()

# message index counter
msg_index = 0

# queue for draw commands
draw_q = []

# current draw color
draw_col = 0x4477FF

def clear():
    """ Handler for clearing screen """
    global last_cols, col_count
    # set to CLEAR_COL
    #draw_q.append( ('draw_polygon', [SCRN_POLY, 1, CLEAR_COL, CLEAR_COL]) )
    
    # set to the last used draw color
#    draw_q.append( ('draw_polygon', [SCRN_POLY, 1, '#%06X'%draw_col, '#%06X'%draw_col]) )
    dq.enqueue( ('draw_polygon', [SCRN_POLY, 1, '#%06X'%draw_col, '#%06X'%draw_col]) )
    make_color_bar()
#    frame.set_canvas_background('rgba(%d,%d,%d,0.004)'%(int_to_rgb(draw_col)))

def int_to_rgb(i):
    return (i>>16) & 255, (i>>8) & 255, i & 255

def inc_color(n):
    """ Change the draw color by incrementing red, blue, and green
        at different rates
    """
    r,g,b = (n>>16), (n>>8)&255, n&255
    return (r+1)%255 << 16 | (g+3)%255 << 8 | (b+7)%255

def make_color_bar():
    global col_count, last_cols
    last_cols = [draw_col]
    [last_cols.append(inc_color(last_cols[n])) for n in range(99)]
    col_count = 0
make_color_bar()

def jitter(pos):
    """ Add random variation to the position """
    return [pos[0] + random.randrange(-JITTER, JITTER+1),
            pos[1] + random.randrange(-JITTER, JITTER+1)]

def click_handler(pos):
    """ on mouse up reset the message index """
    global msg_index, draw_col
    msg_index = 0
    
def drag_handler(pos):
    """ on mouse drag add a new draw_text event to the queue """
    global draw_col, msg_index, col_count

    # Change to Brush Engine
    for d in range(15):
            #canvas.draw_circle(center_point, radius, line_width, line_color, fill_color = color)
        dq.enqueue(	 	('draw_circle', 
                        [jitter(pos), 
                            random.randrange(3,14),
                            1,
                            'Black',#'#%06X'%draw_col, 
                            'rgba(%s,%s,%s,0.8)'%int_to_rgb(draw_col)]
#                            '#%06X'%draw_col]
                        ) 
                     )
    # Having the color bar update dynamically is a little distracting
#    last_cols[col_count] = draw_col
    
    # will cycle through preset
    col_count = (col_count+1)%len(last_cols)
    draw_col = last_cols[col_count]#inc_color(draw_col)
    

# Handler to draw on canvas
def draw(canvas):
    """ cycle through the draw queue """
    count = 50
    for fn,args in dq.drain:
        getattr(canvas, fn)(*args)

    # Experimental gray mask
    # Make Brush for this? Or window dressing type thing?
    c = 0
    for mask in (([W*.1,H*.1],[W*.9,H*.1],[W,0],[0,0]),
                 ([W*.1,H*.9],[W*.9,H*.9],[W,H],[0,H]),
                 ([W*.1,H*.1],[W*.1,H*.9],[0,H],[0,0]),
                 ([W*.9,H*.1],[W*.9,H*.9],[W,H],[W,0])):
        canvas.draw_polygon(mask, 1, "#808080", "#808080")
        col = "#101010" if c%2 else "#B0B0B0"
        canvas.draw_line(mask[0], mask[1], 1, col)
        c+=1
    
    # Experimental color bar
    for x,c in enumerate(last_cols):
        span = (W-20)/100.
        canvas.draw_line((x*span+10,H*.97), (x*span+span+10,H*.97), H*.03, '#%06X'%c) 
        
    # Experimental color bar tracking
    canvas.draw_line((col_count*span+10+0.5*span,H*.97-H*.03/2.), (col_count*span+10+0.5*span,H*.97+H*.03/2.), 2, 'Black')
    
        
# Create a frame and assign callbacks to event handlers
frame = simplegui.create_frame("Draw", W, H)
#frame.set_canvas_background("#114466")
dq.enqueue( ('draw_polygon', [SCRN_POLY, 1, '#%06X'%draw_col, '#%06X'%draw_col]) )
frame.add_label("Click and drag to draw.")
frame.add_label("")
frame.add_button("Clear", clear, 150)

frame.set_mousedrag_handler(drag_handler)
frame.set_mouseclick_handler(click_handler)
frame.set_draw_handler(draw)

# Start the frame animation
frame.start()

# this keeps the screen from getting erased
frame.set_canvas_background('transparent')
